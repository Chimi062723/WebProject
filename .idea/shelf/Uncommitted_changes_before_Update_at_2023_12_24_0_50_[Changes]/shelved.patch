Index: src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.webproject.service.Xu.Admin;\n\nimport com.example.webproject.dao.*;\nimport com.example.webproject.model.*;\n\nimport java.sql.SQLException;\nimport java.util.List;\n\n/**\n * 使用说明：\n * 1.实例化，会自动调用dao层接口，对dao层进行实例化\n * 2.使用封装类xxxEncapsulation将传入的对象封装\n * 3.传入对应操作的类（例如editCanteen(canteen,canteenModifyed)\n * 4.反馈操作结果\n */\npublic class AdminActionImpl implements AdminActions{\n    UserDAO userDAO;\n    CanteenDAO canteenDAO;\n    ReviewDAO reviewDAO;\n    DishDAO dishDAO;\n    PostDAO postDAO;\n    @Override\n    public List<User> getAllAccount() {\n        return userDAO.getAllUsers();\n    }\n    public AdminActionImpl(){\n        this.userDAO = new UserDAO();\n        this.canteenDAO = new CanteenDAO();\n        this.reviewDAO = new ReviewDAO();\n        this.dishDAO = new DishDAO();\n        this.postDAO = new PostDAO();\n    }\n\n    public Canteen getCanteen(int canteenID){\n        try {\n            return canteenDAO.getCanteenByID(canteenID);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public List<Canteen> getAllCanteen(){\n        try {\n            return canteenDAO.getAllCanteens();\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param canteen 新的食堂信息\n     * @return\n     */\n    @Override\n    public int addCanteen(Canteen canteen) {\n        try{\n            canteenDAO.addCanteen(canteen);\n            return 1;\n        }catch (SQLException e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param canteen 要删除的餐厅信息\n     * @return\n     */\n    @Override\n    public int deleteCanteen(Canteen canteen) {\n        try{\n            canteenDAO.deleteCanteen(canteen.getCanteenID());\n            return 1;\n        }catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param newCanteen 新的餐厅信息\n     * @return\n     */\n    @Override\n    public int editCanteen(Canteen newCanteen) {\n        try{\n            canteenDAO.updateCanteen(newCanteen);\n            return 1;\n        }catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    /**\n     * @param userID\n     * @return\n     */\n    @Override\n    public User getAccount(int userID) {\n        return userDAO.getUserByID(userID);\n    }\n\n    /**\n     * @param user 新添加的用户\n     */\n    @Override\n    public int addAccount(User user) {\n        try{\n            userDAO.addUser(user);\n            return 1;\n        }catch (SQLException e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param username 用户名\n     * @param email 邮箱\n     * @param role 角色\n     * @return\n     */\n    @Override\n    public int editAccount(String username, String email, String role) {\n        try{\n            userDAO.updateUser(username,email,role);\n            return 1;\n        }catch (SQLException e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param user 需要删除的用户\n     * @return\n     */\n    @Override\n    public int deleteAccount(User user) {\n        try{\n            userDAO.deleteUser(user.getUserName());\n            return 1;\n        }catch (SQLException e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param reviewID 需要删除的评价\n     * @return\n     */\n    @Override\n    public int deleteReview(int reviewID) {\n        try{\n            reviewDAO.deleteReview(reviewID); //todo:创建postDao类\n            return 1;\n        }catch (SQLException e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param newReview 新评论内容\n     */\n    @Override\n    public void editReview(Review newReview) {\n        try{\n            reviewDAO.updateReview(newReview);\n        }catch (SQLException e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param postID 需要删除的评论\n     * @return\n     */\n    @Override\n    public int deletePost(int postID) {\n        try{\n            postDAO.deletePost(postID);\n            return 1;\n        }catch (SQLException e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * @param newPost 更改后的评论内容\n     * @return\n     */\n    @Override\n    public int editPost(Post newPost) {\n        try{\n            postDAO.editPost(newPost);\n            return 1;\n        }catch (SQLException e){\n            throw new RuntimeException(e);\n        }\n    }\n    /**\n     * @param canteenID 餐厅编号\n     * @param name      餐厅名\n     * @param location  餐厅位置\n     * @param openTime  时间\n     * @param managerName 管理员编号\n     * @return\n     */\n    @Override\n    public Canteen canteenEncapsulation(int canteenID, String name, String location, String openTime, String managerName,String notice) {\n        int managerID = userDAO.getUserByUsername(managerName).getUserID();\n        return new Canteen(canteenID,name,location,openTime,managerID,notice);\n    }\n\n    @Override\n    public Review getReview(int reviewid) {\n        try {\n            return reviewDAO.getReviewByReviewID(reviewid);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    public Dish getDishByID(int dishID) {\n        try {\n            return dishDAO.getDish(dishID);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public User getAccountByUserName(String user) {\n       return userDAO.getUserByUsername(user);\n    }\n\n    public int getDishIDByName(String dish) {\n        try {\n            return dishDAO.getDishIDByName(dish);\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public List<Review> getAllReview() {\n        try {\n            return reviewDAO.getAllReviews();\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n
===================================================================
diff --git a/src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java b/src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java
--- a/src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java	
+++ b/src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java	
@@ -1,4 +1,4 @@
-package com.example.webproject.service.Xu.Admin;
+package com.example.webproject.service.xu.admin;
 
 import com.example.webproject.dao.*;
 import com.example.webproject.model.*;
@@ -49,13 +49,11 @@
 
     /**
      * @param canteen 新的食堂信息
-     * @return
      */
     @Override
-    public int addCanteen(Canteen canteen) {
+    public void addCanteen(Canteen canteen) {
         try{
             canteenDAO.addCanteen(canteen);
-            return 1;
         }catch (SQLException e){
             throw new RuntimeException(e);
         }
@@ -63,13 +61,11 @@
 
     /**
      * @param canteen 要删除的餐厅信息
-     * @return
      */
     @Override
-    public int deleteCanteen(Canteen canteen) {
+    public void deleteCanteen(Canteen canteen) {
         try{
             canteenDAO.deleteCanteen(canteen.getCanteenID());
-            return 1;
         }catch (SQLException e) {
             throw new RuntimeException(e);
         }
@@ -77,13 +73,11 @@
 
     /**
      * @param newCanteen 新的餐厅信息
-     * @return
      */
     @Override
-    public int editCanteen(Canteen newCanteen) {
+    public void editCanteen(Canteen newCanteen) {
         try{
             canteenDAO.updateCanteen(newCanteen);
-            return 1;
         }catch (SQLException e) {
             throw new RuntimeException(e);
         }
@@ -180,13 +174,11 @@
         }
     }
 
-    /**
-     * @param newPost 更改后的评论内容
-     * @return
-     */
     @Override
-    public int editPost(Post newPost) {
+    public int editPost(int id, String title, String content, String username, String createDate) {
         try{
+            int userid = getAccountByUserName(username).getUserID();
+            Post newPost = new Post(id,title,content,userid,createDate);
             postDAO.editPost(newPost);
             return 1;
         }catch (SQLException e){
@@ -242,4 +234,20 @@
             throw new RuntimeException(e);
         }
     }
+
+    public List<Post> getAllPosts() {
+        try {
+            return postDAO.getAllPosts();
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public Post getPost(int id) {
+        try {
+            return postDAO.getPost(id);
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
 }
Index: src/main/java/com/example/webproject/service/Xu/Admin/AdminActions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.webproject.service.Xu.Admin;\nimport com.example.webproject.model.Canteen;\nimport com.example.webproject.model.Review;\nimport com.example.webproject.model.Post;\nimport com.example.webproject.model.User;\n\nimport java.util.List;\n\npublic interface AdminActions {\n   //todo:细化对异常的处理\n   /**\n    * 添加餐厅\n    * @param canteen 新的食堂信息\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   int addCanteen(Canteen canteen);\n\n    List<User> getAllAccount();\n   /**\n    * 删除餐厅\n    * @param canteen 要删除的餐厅信息\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   int deleteCanteen(Canteen canteen);\n   /**\n    * 更改餐厅信息\n    * @param newCanteen 新的餐厅信息\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   int editCanteen(Canteen newCanteen);\n\n   /**\n    * 用用户id获取用户\n    * @param\n    * @return user\n    * @author ChiMi\n    * #Date 2023/12/22\n    */\n   User getAccount(int userID);\n\n   /**\n    * 用户注册时会用到的添加用户\n    * @param user 新添加的用户\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   int addAccount(User user);\n   /**\n    * 修改用户，系统管理员可用\n    * @param username 新用户\n    * @param email\n    * @param role\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   int editAccount(String username, String email, String role);\n\n   /**\n    * 删除指定用户\n    * @param user 需要删除的用户\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   int deleteAccount(User user);\n   /**\n    * 删除指定评价\n    * @param reviewID 需要删除的评价\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n    int deleteReview(int reviewID);\n\n    /**\n     * 删除指定评价\n     *\n     * @param newReview 新评论内容\n     * @author ChiMi\n     * #Date 2023/12/21\n     */\n   void editReview(Review newReview);\n   /**\n    * Description\n    * @param postID 需要删除的评论\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   int deletePost(int postID);\n   /**\n    * Description\n    * @param newPost 更改后的评论内容\n    * @return 操作正常，返回结果1，操作异常，返回结果0\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   int editPost(Post newPost);\n   /**\n    * 将食堂信息封装为食堂实体类\n    * @param canteenID 餐厅编号\n    * @param name 餐厅名\n    * @param location 餐厅位置\n    * @param openTime 时间\n    * @param managerName 管理员编号\n    * @param notice\n    * @return 餐厅实体类\n    * @author ChiMi\n    * #Date 2023/12/21\n    */\n   Canteen canteenEncapsulation(int canteenID, String name, String location, String openTime, String managerName, String notice);\n\n   Review getReview(int reviewid);\n\n    //实体封装类改为用实体类构造方法实现，除canteen封装需要用到managerid和name的转换所以保留以外，其余全部移除\n }\n
===================================================================
diff --git a/src/main/java/com/example/webproject/service/Xu/Admin/AdminActions.java b/src/main/java/com/example/webproject/service/Xu/Admin/AdminActions.java
--- a/src/main/java/com/example/webproject/service/Xu/Admin/AdminActions.java	
+++ b/src/main/java/com/example/webproject/service/Xu/Admin/AdminActions.java	
@@ -1,4 +1,4 @@
-package com.example.webproject.service.Xu.Admin;
+package com.example.webproject.service.xu.admin;
 import com.example.webproject.model.Canteen;
 import com.example.webproject.model.Review;
 import com.example.webproject.model.Post;
@@ -10,30 +10,30 @@
    //todo:细化对异常的处理
    /**
     * 添加餐厅
+    *
     * @param canteen 新的食堂信息
-    * @return 操作正常，返回结果1，操作异常，返回结果0
     * @author ChiMi
     * #Date 2023/12/21
     */
-   int addCanteen(Canteen canteen);
+   void addCanteen(Canteen canteen);
 
     List<User> getAllAccount();
    /**
     * 删除餐厅
+    *
     * @param canteen 要删除的餐厅信息
-    * @return 操作正常，返回结果1，操作异常，返回结果0
     * @author ChiMi
     * #Date 2023/12/21
     */
-   int deleteCanteen(Canteen canteen);
+   void deleteCanteen(Canteen canteen);
    /**
     * 更改餐厅信息
+    *
     * @param newCanteen 新的餐厅信息
-    * @return 操作正常，返回结果1，操作异常，返回结果0
     * @author ChiMi
     * #Date 2023/12/21
     */
-   int editCanteen(Canteen newCanteen);
+   void editCanteen(Canteen newCanteen);
 
    /**
     * 用用户id获取用户
@@ -98,12 +98,17 @@
    int deletePost(int postID);
    /**
     * Description
-    * @param newPost 更改后的评论内容
+    * @param id
+    * @param title
+    * @param username
+    * @param content
+    * @param createDate
     * @return 操作正常，返回结果1，操作异常，返回结果0
     * @author ChiMi
     * #Date 2023/12/21
     */
-   int editPost(Post newPost);
+   int editPost(int id, String title, String content, String username, String createDate);
+
    /**
     * 将食堂信息封装为食堂实体类
     * @param canteenID 餐厅编号
