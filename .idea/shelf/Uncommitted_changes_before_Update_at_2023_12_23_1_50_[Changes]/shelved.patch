Index: progress_note.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># WebProject\n# 2023.12.8\n# 小组成员：胥申康 颜善民 吴思亮 李银莹 周倩\n\n## 项目分工\n- 组长：胥申康\n- view：颜善民\n- controller：吴思亮\n- service：胥申康 李银莹\n- dao：周倩\n- mysql：颜善民\n\n\n\n## 项目进度\n### 2023.12.15\n- 完成了基本的登录注册页面前端\n- 完成了基本数据库设计与搭建\n- 完成了服务器的tomcat、jdk、mysql配置\n- 提交人：颜善民\n\n### 2023.12.17\n- 完成了基本的系统管理员登录进去后的首页\n- _需要传入的变量：_\n- _canteens: 所有食堂信息_\n- _users: 所有用户信息_\n- _reviews: 所有评价信息_\n- _communityPosts: 所有社区帖子信息_\n- 完成了系统管理员的食堂管理页面\n- _需要传入的变量：_\n- _canteens: 所有食堂信息_\n- 完成了系统管理员的用户管理页面\n- _需要传入的变量：_\n- _users: 所有用户信息_\n- 完成了系统管理员的评价管理页面\n- _需要传入的变量：_\n- _reviews: 所有评价信息_\n- 完成了系统管理员的社区帖子管理页面\n- _需要传入的变量：_\n- _communityPosts: 所有社区帖子信息_\n- 提交人：颜善民\n\n### 2023.12.18\n- 修改命名，统一改为admin_...\n- 添加表格样式\n- 初步完成食堂管理员首页\n- _需要传入的变量：_\n- _username: 用户名_\n- _unreviews: 未审核的评价信息_\n- _uncomplaints: 未处理的投诉信息_\n- 初步完成食堂管理员的食堂管理页面\n- _需要传入的变量：_\n- _canteens: 管理的食堂信息_\n- 初步完成菜品维护页面\n- _需要传入的变量_\n- _dishes: 所有菜品信息_\n- 提交人：颜善民\n\n### 2023.12.19\n- 创建了service层的文件，给出了函数命名\n- 目前参数及返回值全部设定为空\n- dao层创建了User，Admin和Canteen，需要DAO层给出其他的实体类\n- 提交人：胥申康\n\n### 2023.12.20\n- 修改了user类\n- 添加了login和logout\n- 增加DBhelper\n-  实现登录，注册改，密码，退出功能\n-  提交人：李银莹
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/progress_note.md b/progress_note.md
--- a/progress_note.md	(revision 7a46cce6546ba42327515bf9f2f45169e9b245fe)
+++ b/progress_note.md	(date 1703266730972)
@@ -62,9 +62,14 @@
 - dao层创建了User，Admin和Canteen，需要DAO层给出其他的实体类
 - 提交人：胥申康
 
-### 2023.12.20
+### 2023.12.21
 - 修改了user类
 - 添加了login和logout
 - 增加DBhelper
 -  实现登录，注册改，密码，退出功能
--  提交人：李银莹
\ No newline at end of file
+-  提交人：李银莹
+
+### 2023.12.22
+- 完成了用户界面查看菜品功能
+- 发帖，查看历史帖子实现
+- 提交人：李银莹
\ No newline at end of file
Index: src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package com.example.webproject.service.Xu.Admin;\n//\n//import com.example.webproject.dao.CanteenDAO;\n//import com.example.webproject.dao.ReviewDAO;\n//import com.example.webproject.dao.UserDAO;\n//import com.example.webproject.model.Canteen;\n//import com.example.webproject.model.Review;\n//import com.example.webproject.model.Post;\n//import com.example.webproject.model.User;\n//import com.oracle.wls.shaded.org.apache.bcel.classfile.ConstantNameAndType;\n//\n//import java.sql.Date;\n//import java.sql.SQLException;\n//import java.util.List;\n//\n///**\n// * 使用说明：\n// * 1.实例化，会自动调用dao层接口，对dao层进行实例化\n// * 2.使用封装类xxxEncapsulation将传入的对象封装\n// * 3.传入对应操作的类（例如editCanteen(canteen,canteenModifyed)\n// * 4.反馈操作结果\n// */\n//public class AdminActionImpl implements AdminActions{\n//    //todo: 管理员操作的具体实现，数据库错误的异常处理\n//    UserDAO userDAO;\n//    CanteenDAO canteenDAO;\n//    ReviewDAO reviewDAO;\n//    public AdminActionImpl(){\n//        this.userDAO = new UserDAO();\n//        this.canteenDAO = new CanteenDAO();\n//        this.reviewDAO = new ReviewDAO();\n//    }\n//\n//    public Canteen getCanteen(int canteenID){\n//        try {\n//            return canteenDAO.getCanteenByID(canteenID);\n//        } catch (SQLException e) {\n//            //todo:异常处理\n//            throw new RuntimeException(e);\n//        }\n//    }\n//\n//    public List<Canteen> getAllCanteen(){\n//        try {\n//            return canteenDAO.getAllCanteens();\n//        } catch (SQLException e) {\n//            //todo:异常处理\n//            throw new RuntimeException(e);\n//        }\n//    }\n//\n//    /**\n//     * @param canteen 新的食堂信息\n//     * @return\n//     */\n//    @Override\n//    public int addCanteen(Canteen canteen) {\n//        try{\n//            canteenDAO.addCanteen(canteen);\n//            return 1;\n//        }catch (SQLException e){\n//            //todo\n//            return 0;\n//        }\n//    }\n//\n//    /**\n//     * @param canteen 要删除的餐厅信息\n//     * @return\n//     */\n//    @Override\n//    public int deleteCanteen(Canteen canteen) {\n//        try{\n//            canteenDAO.deleteCanteen(canteen.getCanteenID());\n//            return 1;\n//        }catch (SQLException e) {\n//            //todo\n//            return 0;\n//        }\n//    }\n//\n//    /**\n//     * @param newCanteen 新的餐厅信息\n//     * @return\n//     */\n//    @Override\n//    public int editCanteen(Canteen newCanteen) {\n//        try{\n//            canteenDAO.updateCanteen(newCanteen);\n//            return 1;\n//        }catch (SQLException e) {\n//            //todo\n//            return 0;\n//        }\n//    }\n//\n//    /**\n//     * @param userID\n//     * @return\n//     */\n//    @Override\n//    public User getAccount(int userID) {\n//        return userDAO.getUserByID(userID);\n//    }\n//\n//    /**\n//     * @param user 新添加的用户\n//     */\n//    @Override\n//    public int addAccount(User user) {\n//        try{\n//            userDAO.addUser(user);\n//            return 1;\n//        }catch (SQLException e){\n//            //todo\n//            return 0;\n//        }\n//    }\n//\n//    /**\n//     * @param username 用户名\n//     * @param email 邮箱\n//     * @param role 角色\n//     * @return\n//     */\n//    @Override\n//    public int editAccount(String username, String email, String role) {\n//        try{\n//            userDAO.updateUser(username,email,role);\n//            return 1;\n//        }catch (SQLException e){\n//            //todo\n//            return 0;\n//        }\n//    }\n//\n//    /**\n//     * @param user 需要删除的用户\n//     * @return\n//     */\n//    @Override\n//    public int deleteAccount(User user) {\n//        try{\n//            userDAO.deleteUser(user.getUserName());\n//            return 1;\n//        }catch (SQLException e){\n//            //todo\n//            return 0;\n//        }\n//    }\n//\n//    /**\n//     * @param review 需要删除的评价\n//     * @return\n//     */\n//    @Override\n//    public int deleteReview(Review review) {\n////        try{\n////            //todo:reviewDAO.deleteReview(review); //todo:创建postDao类\n////            return 1;\n////        }catch (SQLException e){\n////            //todo\n////            return 0;\n////        }\n//        return 0;\n//    }\n//\n//    /**\n//     * @param newReview 新评论内容\n//     * @return\n//     */\n//    @Override\n//    public int editReview(Review newReview) {\n////        try{\n////            postDao.deletePost(post); //todo 创建postDao类\n////            return 1;\n////        }catch (SQLException e){\n////            //todo\n////            return 0;\n////        }\n//        return 0;\n//    }\n//\n//    /**\n//     * @param post 需要删除的评论\n//     * @return\n//     */\n//    @Override\n//    public int deletePost(Post post) {\n////        try{\n////            postDao.deletePost(post); //todo 创建postDao类\n////            return 1;\n////        }catch (SQLException e){\n////            //todo\n////            return 0;\n////        }\n//        return 0;\n//    }\n//\n//    /**\n//     * @param newPost 更改后的评论内容\n//     * @return\n//     */\n//    @Override\n//    public int editPost(Post newPost) {\n////        try{\n////            postDao.editPost(newPost); //todo 创建postDao类\n////            return 1;\n////        }catch (SQLException e){\n////            //todo\n////            return 0;\n////        }\n//        return 0;\n//    }\n//    /**\n//     * @param canteenID 餐厅编号\n//     * @param name      餐厅名\n//     * @param location  餐厅位置\n//     * @param openTime  时间\n//     * @param managerName 管理员编号\n//     * @return\n//     */\n//    @Override\n//    public Canteen canteenEncapsulation(int canteenID, String name, String location, String openTime, String managerName,String notice) {\n//        int managerID = userDAO.getUserByUsername(managerName).getUserID();\n//        return new Canteen(canteenID,name,location,openTime,managerID,notice);\n//    }\n//\n//    /**\n//     * @param postID     帖子编号（自动生成）\n//     * @param userID     用户编号\n//     * @param title      标题\n//     * @param content    内容\n//     * @param createDate 创建时间，可传空值，由系统自动生成\n//     * @param like       用户喜欢程度\n//     * @return\n//     */\n//    @Override\n//    public Post postEncapsulation(int postID, int userID, String title, String content, Date createDate, int like) {\n//        return null;\n//    }\n//\n//    /**\n//     * @param reviewID   评价id（自动生成）\n//     * @param userID     用户id\n//     * @param dishID     菜品编号\n//     * @param rating     评价(int)\n//     * @param comment    评价内容\n//     * @param reply\n//     * @param createDate 创建日期(自动生成)\n//     * @return\n//     */\n//    @Override\n//    public Review reviewEncapsulation(int reviewID, int userID, int dishID, int rating, String comment, String reply, Date createDate) {\n//        return null;\n//    }\n//\n//    /**\n//     * @param postID     帖子编号（自动生成）\n//     * @param userID     用户编号\n//     * @param title      标题\n//     * @param content    内容\n//     * @param createDate 创建时间，可传空值，由系统自动生成\n//     * @param like       用户喜欢程度\n//     * @return\n//     */\n//    @Override\n//    public Post postEncapsulation(int postID, int userID, String title, String content, String createDate, int like, String picture) {\n//        return new Post(postID,userID,title,content,createDate,like,picture);\n//    }\n//\n//    /**\n//     * @param reviewID   评价id（自动生成）\n//     * @param userID     用户id\n//     * @param dishID     菜品编号\n//     * @param rating     评价(int)\n//     * @param comment    评价内容\n//     * @param reply\n//     * @param createDate 创建日期(自动生成)\n//     * @return\n//     */\n//    @Override\n//    public Review reviewEncapsulation(int reviewID, int userID, int dishID, int rating, String comment, String reply, Date createDate,String picture) {\n//        return new Review(reviewID,userID,dishID,rating,comment,reply,createDate,picture);\n//    }\n//}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java b/src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java
--- a/src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java	(revision 7a46cce6546ba42327515bf9f2f45169e9b245fe)
+++ b/src/main/java/com/example/webproject/service/Xu/Admin/AdminActionImpl.java	(date 1703265297453)
@@ -1,286 +1,292 @@
-//package com.example.webproject.service.Xu.Admin;
-//
-//import com.example.webproject.dao.CanteenDAO;
-//import com.example.webproject.dao.ReviewDAO;
-//import com.example.webproject.dao.UserDAO;
-//import com.example.webproject.model.Canteen;
-//import com.example.webproject.model.Review;
-//import com.example.webproject.model.Post;
-//import com.example.webproject.model.User;
-//import com.oracle.wls.shaded.org.apache.bcel.classfile.ConstantNameAndType;
-//
-//import java.sql.Date;
-//import java.sql.SQLException;
-//import java.util.List;
-//
-///**
-// * 使用说明：
-// * 1.实例化，会自动调用dao层接口，对dao层进行实例化
-// * 2.使用封装类xxxEncapsulation将传入的对象封装
-// * 3.传入对应操作的类（例如editCanteen(canteen,canteenModifyed)
-// * 4.反馈操作结果
-// */
-//public class AdminActionImpl implements AdminActions{
-//    //todo: 管理员操作的具体实现，数据库错误的异常处理
-//    UserDAO userDAO;
-//    CanteenDAO canteenDAO;
-//    ReviewDAO reviewDAO;
-//    public AdminActionImpl(){
-//        this.userDAO = new UserDAO();
-//        this.canteenDAO = new CanteenDAO();
-//        this.reviewDAO = new ReviewDAO();
-//    }
-//
-//    public Canteen getCanteen(int canteenID){
-//        try {
-//            return canteenDAO.getCanteenByID(canteenID);
-//        } catch (SQLException e) {
-//            //todo:异常处理
-//            throw new RuntimeException(e);
-//        }
-//    }
-//
-//    public List<Canteen> getAllCanteen(){
-//        try {
-//            return canteenDAO.getAllCanteens();
-//        } catch (SQLException e) {
-//            //todo:异常处理
-//            throw new RuntimeException(e);
-//        }
-//    }
-//
-//    /**
-//     * @param canteen 新的食堂信息
-//     * @return
-//     */
-//    @Override
-//    public int addCanteen(Canteen canteen) {
+package com.example.webproject.service.Xu.Admin;
+
+import com.example.webproject.dao.CanteenDAO;
+import com.example.webproject.dao.ReviewDAO;
+import com.example.webproject.dao.UserDAO;
+import com.example.webproject.model.Canteen;
+import com.example.webproject.model.Review;
+import com.example.webproject.model.Post;
+import com.example.webproject.model.User;
+import com.oracle.wls.shaded.org.apache.bcel.classfile.ConstantNameAndType;
+
+import java.sql.Date;
+import java.sql.SQLException;
+import java.sql.Timestamp;
+import java.util.List;
+
+/**
+ * 使用说明：
+ * 1.实例化，会自动调用dao层接口，对dao层进行实例化
+ * 2.使用封装类xxxEncapsulation将传入的对象封装
+ * 3.传入对应操作的类（例如editCanteen(canteen,canteenModifyed)
+ * 4.反馈操作结果
+ */
+public class AdminActionImpl implements AdminActions{
+    //todo: 管理员操作的具体实现，数据库错误的异常处理
+    UserDAO userDAO;
+    CanteenDAO canteenDAO;
+    ReviewDAO reviewDAO;
+    public AdminActionImpl(){
+        this.userDAO = new UserDAO();
+        this.canteenDAO = new CanteenDAO();
+        this.reviewDAO = new ReviewDAO();
+    }
+
+    public Canteen getCanteen(int canteenID){
+        try {
+            return canteenDAO.getCanteenByID(canteenID);
+        } catch (SQLException e) {
+            //todo:异常处理
+            throw new RuntimeException(e);
+        }
+    }
+
+    public List<Canteen> getAllCanteen(){
+        try {
+            return canteenDAO.getAllCanteens();
+        } catch (SQLException e) {
+            //todo:异常处理
+            throw new RuntimeException(e);
+        }
+    }
+
+    /**
+     * @param canteen 新的食堂信息
+     * @return
+     */
+    @Override
+    public int addCanteen(Canteen canteen) {
+        try{
+            canteenDAO.addCanteen(canteen);
+            return 1;
+        }catch (SQLException e){
+            //todo
+            return 0;
+        }
+    }
+
+    /**
+     * @param canteen 要删除的餐厅信息
+     * @return
+     */
+    @Override
+    public int deleteCanteen(Canteen canteen) {
+        try{
+            canteenDAO.deleteCanteen(canteen.getCanteenID());
+            return 1;
+        }catch (SQLException e) {
+            //todo
+            return 0;
+        }
+    }
+
+    /**
+     * @param newCanteen 新的餐厅信息
+     * @return
+     */
+    @Override
+    public int editCanteen(Canteen newCanteen) {
+        try{
+            canteenDAO.updateCanteen(newCanteen);
+            return 1;
+        }catch (SQLException e) {
+            //todo
+            return 0;
+        }
+    }
+
+    /**
+     * @param userID
+     * @return
+     */
+    @Override
+    public User getAccount(int userID) {
+        return userDAO.getUserByID(userID);
+    }
+
+    /**
+     * @param user 新添加的用户
+     */
+    @Override
+    public int addAccount(User user) {
+        try{
+            userDAO.addUser(user);
+            return 1;
+        }catch (SQLException e){
+            //todo
+            return 0;
+        }
+    }
+
+    /**
+     * @param username 用户名
+     * @param email 邮箱
+     * @param role 角色
+     * @return
+     */
+    @Override
+    public int editAccount(String username, String email, String role) {
+        try{
+            userDAO.updateUser(username,email,role);
+            return 1;
+        }catch (SQLException e){
+            //todo
+            return 0;
+        }
+    }
+
+    /**
+     * @param user 需要删除的用户
+     * @return
+     */
+    @Override
+    public int deleteAccount(User user) {
+        try{
+            userDAO.deleteUser(user.getUserName());
+            return 1;
+        }catch (SQLException e){
+            //todo
+            return 0;
+        }
+    }
+
+    /**
+     * @param review 需要删除的评价
+     * @return
+     */
+    @Override
+    public int deleteReview(Review review) {
 //        try{
-//            canteenDAO.addCanteen(canteen);
+//            //todo:reviewDAO.deleteReview(review); //todo:创建postDao类
 //            return 1;
 //        }catch (SQLException e){
 //            //todo
 //            return 0;
 //        }
-//    }
-//
-//    /**
-//     * @param canteen 要删除的餐厅信息
-//     * @return
-//     */
-//    @Override
-//    public int deleteCanteen(Canteen canteen) {
+        return 0;
+    }
+
+    /**
+     * @param newReview 新评论内容
+     * @return
+     */
+    @Override
+    public int editReview(Review newReview) {
 //        try{
-//            canteenDAO.deleteCanteen(canteen.getCanteenID());
+//            postDao.deletePost(post); //todo 创建postDao类
 //            return 1;
-//        }catch (SQLException e) {
+//        }catch (SQLException e){
 //            //todo
 //            return 0;
 //        }
-//    }
-//
-//    /**
-//     * @param newCanteen 新的餐厅信息
-//     * @return
-//     */
-//    @Override
-//    public int editCanteen(Canteen newCanteen) {
+        return 0;
+    }
+
+    /**
+     * @param post 需要删除的评论
+     * @return
+     */
+    @Override
+    public int deletePost(Post post) {
 //        try{
-//            canteenDAO.updateCanteen(newCanteen);
+//            postDao.deletePost(post); //todo 创建postDao类
 //            return 1;
-//        }catch (SQLException e) {
+//        }catch (SQLException e){
 //            //todo
 //            return 0;
 //        }
-//    }
-//
-//    /**
-//     * @param userID
-//     * @return
-//     */
-//    @Override
-//    public User getAccount(int userID) {
-//        return userDAO.getUserByID(userID);
-//    }
-//
-//    /**
-//     * @param user 新添加的用户
-//     */
-//    @Override
-//    public int addAccount(User user) {
-//        try{
-//            userDAO.addUser(user);
-//            return 1;
-//        }catch (SQLException e){
-//            //todo
-//            return 0;
-//        }
-//    }
-//
-//    /**
-//     * @param username 用户名
-//     * @param email 邮箱
-//     * @param role 角色
-//     * @return
-//     */
-//    @Override
-//    public int editAccount(String username, String email, String role) {
+        return 0;
+    }
+
+    /**
+     * @param newPost 更改后的评论内容
+     * @return
+     */
+    @Override
+    public int editPost(Post newPost) {
 //        try{
-//            userDAO.updateUser(username,email,role);
+//            postDao.editPost(newPost); //todo 创建postDao类
 //            return 1;
 //        }catch (SQLException e){
 //            //todo
 //            return 0;
 //        }
-//    }
-//
-//    /**
-//     * @param user 需要删除的用户
-//     * @return
+        return 0;
+    }
+    /**
+     * @param canteenID 餐厅编号
+     * @param name      餐厅名
+     * @param location  餐厅位置
+     * @param openTime  时间
+     * @param managerName 管理员编号
+     * @return
+     */
+    @Override
+    public Canteen canteenEncapsulation(int canteenID, String name, String location, String openTime, String managerName,String notice) {
+        int managerID = userDAO.getUserByUsername(managerName).getUserID();
+        return new Canteen(canteenID,name,location,openTime,managerID,notice);
+    }
+
+    /**
+     * @param postID     帖子编号（自动生成）
+     * @param userID     用户编号
+     * @param title      标题
+     * @param content    内容
+     * @param createDate 创建时间，可传空值，由系统自动生成
+     * @param like       用户喜欢程度
+     * @return
+     */
+    @Override
+    public Post postEncapsulation(int postID, int userID, String title, String content, Date createDate, int like) {
+        return null;
+    }
+
+    /**
+     * @param reviewID   评价id（自动生成）
+     * @param userID     用户id
+     * @param dishID     菜品编号
+     * @param rating     评价(int)
+     * @param comment    评价内容
+     * @param reply
+     * @param createDate 创建日期(自动生成)
+     * @return
+     */
+    @Override
+    public Review reviewEncapsulation(int reviewID, int userID, int dishID, int rating, String comment, String reply, Date createDate) {
+        return null;
+    }
+
+    /**
+     * @param postID     帖子编号（自动生成）
+     * @param userID     用户编号
+     * @param title      标题
+     * @param content    内容
+     * @param createDate 创建时间，可传空值，由系统自动生成
+     * @param like       用户喜欢程度
+     * @return
+     */
+    @Override
+    public Post postEncapsulation(int postID, int userID, String title, String content, String createDate, int like, String picture) {
+        return new Post(postID,userID,title,content,createDate,like,picture);
+    }
+
+    @Override
+    public Review reviewEncapsulation(int reviewID, int userID, int dishID, int rating, String comment, String reply, Date createDate, String picture) {
+        return null;
+    }
+
+    /**
+     * @param reviewID   评价id（自动生成）
+     * @param userID     用户id
+     * @param dishID     菜品编号
+     * @param rating     评价(int)
+     * @param comment    评价内容
+     * @param reply
+     * @param createDate 创建日期(自动生成)
+     * @return
 //     */
 //    @Override
-//    public int deleteAccount(User user) {
-//        try{
-//            userDAO.deleteUser(user.getUserName());
-//            return 1;
-//        }catch (SQLException e){
-//            //todo
-//            return 0;
-//        }
-//    }
-//
-//    /**
-//     * @param review 需要删除的评价
-//     * @return
-//     */
-//    @Override
-//    public int deleteReview(Review review) {
-////        try{
-////            //todo:reviewDAO.deleteReview(review); //todo:创建postDao类
-////            return 1;
-////        }catch (SQLException e){
-////            //todo
-////            return 0;
-////        }
-//        return 0;
-//    }
-//
-//    /**
-//     * @param newReview 新评论内容
-//     * @return
-//     */
-//    @Override
-//    public int editReview(Review newReview) {
-////        try{
-////            postDao.deletePost(post); //todo 创建postDao类
-////            return 1;
-////        }catch (SQLException e){
-////            //todo
-////            return 0;
-////        }
-//        return 0;
-//    }
-//
-//    /**
-//     * @param post 需要删除的评论
-//     * @return
-//     */
-//    @Override
-//    public int deletePost(Post post) {
-////        try{
-////            postDao.deletePost(post); //todo 创建postDao类
-////            return 1;
-////        }catch (SQLException e){
-////            //todo
-////            return 0;
-////        }
-//        return 0;
-//    }
-//
-//    /**
-//     * @param newPost 更改后的评论内容
-//     * @return
-//     */
-//    @Override
-//    public int editPost(Post newPost) {
-////        try{
-////            postDao.editPost(newPost); //todo 创建postDao类
-////            return 1;
-////        }catch (SQLException e){
-////            //todo
-////            return 0;
-////        }
-//        return 0;
-//    }
-//    /**
-//     * @param canteenID 餐厅编号
-//     * @param name      餐厅名
-//     * @param location  餐厅位置
-//     * @param openTime  时间
-//     * @param managerName 管理员编号
-//     * @return
-//     */
-//    @Override
-//    public Canteen canteenEncapsulation(int canteenID, String name, String location, String openTime, String managerName,String notice) {
-//        int managerID = userDAO.getUserByUsername(managerName).getUserID();
-//        return new Canteen(canteenID,name,location,openTime,managerID,notice);
-//    }
-//
-//    /**
-//     * @param postID     帖子编号（自动生成）
-//     * @param userID     用户编号
-//     * @param title      标题
-//     * @param content    内容
-//     * @param createDate 创建时间，可传空值，由系统自动生成
-//     * @param like       用户喜欢程度
-//     * @return
-//     */
-//    @Override
-//    public Post postEncapsulation(int postID, int userID, String title, String content, Date createDate, int like) {
-//        return null;
-//    }
-//
-//    /**
-//     * @param reviewID   评价id（自动生成）
-//     * @param userID     用户id
-//     * @param dishID     菜品编号
-//     * @param rating     评价(int)
-//     * @param comment    评价内容
-//     * @param reply
-//     * @param createDate 创建日期(自动生成)
-//     * @return
-//     */
-//    @Override
-//    public Review reviewEncapsulation(int reviewID, int userID, int dishID, int rating, String comment, String reply, Date createDate) {
-//        return null;
-//    }
-//
-//    /**
-//     * @param postID     帖子编号（自动生成）
-//     * @param userID     用户编号
-//     * @param title      标题
-//     * @param content    内容
-//     * @param createDate 创建时间，可传空值，由系统自动生成
-//     * @param like       用户喜欢程度
-//     * @return
-//     */
-//    @Override
-//    public Post postEncapsulation(int postID, int userID, String title, String content, String createDate, int like, String picture) {
-//        return new Post(postID,userID,title,content,createDate,like,picture);
-//    }
-//
-//    /**
-//     * @param reviewID   评价id（自动生成）
-//     * @param userID     用户id
-//     * @param dishID     菜品编号
-//     * @param rating     评价(int)
-//     * @param comment    评价内容
-//     * @param reply
-//     * @param createDate 创建日期(自动生成)
-//     * @return
-//     */
-//    @Override
-//    public Review reviewEncapsulation(int reviewID, int userID, int dishID, int rating, String comment, String reply, Date createDate,String picture) {
+//    public Review reviewEncapsulation(int reviewID, int userID, int dishID, int rating, String comment, String reply, Timestamp createDate, String picture) {
 //        return new Review(reviewID,userID,dishID,rating,comment,reply,createDate,picture);
 //    }
-//}
+}
Index: src/main/webapp/customer_dish.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%--\n  Created by IntelliJ IDEA.\n  User: 韶光善良君\n  Date: 2023/12/20\n  Time: 22:38\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<html>\n<head>\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"css/customer_menu.css\" />\n    <link rel=\"stylesheet\" href=\"https://cdn.staticfile.org/foundation/5.5.3/css/foundation.min.css\">\n    <script src=\"https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js\"></script>\n    <script src=\"https://cdn.staticfile.org/foundation/5.5.3/js/foundation.min.js\"></script>\n    <script src=\"https://cdn.staticfile.org/foundation/5.5.3/js/vendor/modernizr.js\"></script>\n</head>\n<body>\n<jsp:include page=\"custom_sidebar.jspf\" />\n<div id=\"main-content\">\n<%--    <h2>菜品一览</h2>--%>\n\n<%--    <!-- 检索表单 -->--%>\n<%--    <form action=\"SearchDishesServlet\" method=\"get\">--%>\n<%--        <select name=\"searchType\">--%>\n<%--            <option value=\"cuisine\">菜系</option>--%>\n<%--            <option value=\"price\">价格</option>--%>\n<%--            <option value=\"canteen\">食堂</option>--%>\n<%--        </select>--%>\n<%--        <input type=\"text\" name=\"searchQuery\" />--%>\n<%--        <input type=\"submit\" value=\"检索\" />--%>\n<%--    </form>--%>\n    <h2>菜品一览</h2>\n    <ul class=\"tabs\" data-tab>\n        <li class=\"tab-title active\"><a href=\"#home\">总览</a></li>\n        <li class=\"tab-title\"><a href=\"#menu1\">菜系</a></li>\n        <li class=\"tab-title\"><a href=\"#menu2\">食堂</a></li>\n        <li class=\"tab-title\"><a href=\"#menu3\">价格</a></li>\n    </ul>\n    <div class=\"tabs-content\">\n        <div class=\"content active\" id=\"home\">\n            <p>列表/表格显示所有菜品</p>\n\n        </div>\n        <div class=\"content\" id=\"menu1\">\n            <form action=\"customers_dish\" method=\"get\">\n                <label for=\"cuisine-select\">选择菜系: </label>\n                <select id=\"cuisine-select\" name=\"cuisine\">\n                    <option value=\"all\">所有菜品</option>\n                    <option value=\"川菜\">川菜</option>\n                    <option value=\"浙菜\">浙菜</option>\n<%--                    <option value=\"鲁菜\">鲁菜</option>--%>\n                </select>\n                <input type=\"submit\" value=\"确认\">\n            </form>\n            <div id=\"search-results\">\n                <!-- 动态生成的检索结果将在这里显示 -->\n                <c:forEach items=\"${requestScope.dishList}\" var=\"dish\">\n                    <div class=\"dish-card\">\n                            <%--                <img src=\"placeholder-image.jpg\" alt=\"${dish.name}\" />--%>\n                        <div class=\"dish-details\">\n                            <span class=\"dish-name\">${dish.name}</span>\n                            <span class=\"dish-price\">价格: ${dish.price}</span>\n                            <span class=\"dish-type\">类别: ${dish.type}</span>\n                            <span class=\"dish-canteen\">食堂id: ${dish.canteenID}</span>\n                                <%--                    <a href=\"dish_detial_Servlet?name='${dish.name}'\">详情</a>--%>\n                            <!-- 更多信息 -->\n                        </div>\n                    </div>\n                </c:forEach>\n            </div>\n        </div>\n        <div class=\"content\" id=\"menu2\">\n            <li><a href=\"#\">升序</a></li>\n            <li><a href=\"#\">降序</a></li>\n            <p>呈现不同食堂的选项，点击之后只显示该食堂的菜品</p>\n        </div>\n        <div class=\"content\" id=\"menu3\">\n            <p>提供降序和升序按钮，点击之后按顺序显示</p>\n        </div>\n    </div>\n    <!-- 检索结果 -->\n\n\n</div>\n<script>\n    $(document).ready(function() {\n        $(document).foundation();\n    })\n    document.querySelectorAll('.dropdown-content a').forEach(anchor => {\n        anchor.addEventListener('click', (event) => {\n            // 阻止默认行为\n            event.preventDefault();\n\n            // 获取所选标签的href属性值\n            var targetTab = event.target.getAttribute('href').replace('#', '');\n\n            // 隐藏所有内容\n            document.querySelectorAll('.content').forEach(content => {\n                content.classList.remove('active');\n            });\n\n            // 显示目标内容\n            document.getElementById(targetTab).classList.add('active');\n        });\n    });\n    // 确保DOM加载完毕后，执行相关操作\n    window.addEventListener('DOMContentLoaded', () => {\n        const cuisineSelect = document.getElementById('cuisine-select');\n        cuisineSelect.value = localStorage.getItem('selectedCuisine') || 'all'; // 恢复用户之前的菜系选择\n\n        // 监听下拉菜单的change事件，保存用户选择到本地存储\n        cuisineSelect.addEventListener('change', () => {\n            localStorage.setItem('selectedCuisine', cuisineSelect.value);\n        });\n    });\n</script>\n\n\n</body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/customer_dish.jsp b/src/main/webapp/customer_dish.jsp
--- a/src/main/webapp/customer_dish.jsp	(revision 7a46cce6546ba42327515bf9f2f45169e9b245fe)
+++ b/src/main/webapp/customer_dish.jsp	(date 1703266053452)
@@ -64,7 +64,7 @@
                             <span class="dish-price">价格: ${dish.price}</span>
                             <span class="dish-type">类别: ${dish.type}</span>
                             <span class="dish-canteen">食堂id: ${dish.canteenID}</span>
-                                <%--                    <a href="dish_detial_Servlet?name='${dish.name}'">详情</a>--%>
+                            <a href="dish_detial_Servlet?name='${dish.name}'">详情</a>
                             <!-- 更多信息 -->
                         </div>
                     </div>
Index: src/main/java/com/example/webproject/model/Review.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.webproject.model;\n\nimport java.sql.Date;\nimport java.sql.Timestamp;\n\npublic class Review {\n    int reviewID;\n    int userID;\n    int dishID;\n    int rating;\n    String comment;\n    Timestamp createDate;\n\n    public Timestamp getCreateDate() {\n        return createDate;\n    }\n\n    public void setCreateDate(Timestamp createDate) {\n        this.createDate = createDate;\n    }\n\n    public String getReply() {\n        return reply;\n    }\n\n    public void setReply(String reply) {\n        this.reply = reply;\n    }\n\n    String reply;\n    public Review(int reviewID, int userID, int dishID, int rating, String comment, String reply, Timestamp createDate) {\n        this.reviewID=reviewID;\n        this.userID = userID;\n        this.dishID = dishID;\n        this.rating = rating;\n        this.comment = comment;\n        this.reply = reply;\n        this.createDate = createDate;\n    }\n\n    public int getReviewID() {\n        return reviewID;\n    }\n\n    public void setReviewID(int reviewID) {\n        this.reviewID = reviewID;\n    }\n\n    public int getUserID() {\n        return userID;\n    }\n\n    public void setUserID(int userID) {\n        this.userID = userID;\n    }\n\n    public int getDishID() {\n        return dishID;\n    }\n\n    public void setDishID(int dishID) {\n        this.dishID = dishID;\n    }\n\n    public int getRating() {\n        return rating;\n    }\n\n    public void setRating(int rating) {\n        this.rating = rating;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/webproject/model/Review.java b/src/main/java/com/example/webproject/model/Review.java
--- a/src/main/java/com/example/webproject/model/Review.java	(revision 7a46cce6546ba42327515bf9f2f45169e9b245fe)
+++ b/src/main/java/com/example/webproject/model/Review.java	(date 1703265297449)
@@ -11,6 +11,7 @@
     String comment;
     Timestamp createDate;
 
+
     public Timestamp getCreateDate() {
         return createDate;
     }
Index: src/main/webapp/customer_canteen.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><%--\n  Created by IntelliJ IDEA.\n  User: 韶光善良君\n  Date: 2023/12/20\n  Time: 22:40\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<html>\n<head>\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"css/customer_menu.css\"/>\n    <link rel=\"stylesheet\" href=\"css/canteen_table.css\"/>\n</head>\n<body>\n<jsp:include page=\"custom_sidebar.jspf\" />\n<table>    <!-- 表格标题 -->\n    <caption>食堂信息表</caption>    <!-- 表格第一行：表格表头 -->\n    <tr>\n        <th>编号</th>\n        <th>名称</th>\n        <th>位置</th>\n        <th>开放时间</th>\n        <th>操作</th>\n    </tr>\n    <c:forEach var=\"canteen\" items=\"${sessionScope.canteens}\">\n        <tr>\n            <td>${canteen.id}</td>\n            <td>${canteen.name}</td>\n            <td>${canteen.location}</td>\n            <td>${canteen.openTime}</td>\n            <!-- 在该单元格中创建一个链接标签，void运算符来阻止href返回值，通过onclick事件(鼠标点击)属性来删除信息行-->\n            <td><a href=\"CanteenDetailServlet?canteenID='${canteen.id}'\">查看</a></td>\n        </tr>\n        <!-- 表格第三行：学生信息2 -->\n    </c:forEach>\n</table>\n</body>\n</html>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/customer_canteen.jsp b/src/main/webapp/customer_canteen.jsp
--- a/src/main/webapp/customer_canteen.jsp	(revision 7a46cce6546ba42327515bf9f2f45169e9b245fe)
+++ b/src/main/webapp/customer_canteen.jsp	(date 1703266975710)
@@ -15,6 +15,12 @@
 </head>
 <body>
 <jsp:include page="custom_sidebar.jspf" />
+<div>
+<form>
+    <input type="text" name="canteenName" placeholder="请输入食堂id">
+    <input type="submit" value="搜索">
+</form>
+</div>
 <table>    <!-- 表格标题 -->
     <caption>食堂信息表</caption>    <!-- 表格第一行：表格表头 -->
     <tr>
